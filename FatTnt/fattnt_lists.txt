FatTnt lists
---------------------------------------

LICENSE [LICENSE PENDING]
--------------------------
Something minimal on top of what can be done with a Bukkit/CraftBukkit plugin.
Supposedly this would range from public domain (probably not) to somewhere around MIT license.
Actually it is safe to assume MIT license, but if the license can be "less", i will probably make it so.


ACTUAL LISTS
----------------

Features: 
- select what entities are handled (tnt, creeper?)
- configure: block resistance (strength)
- modifiers for explosion radius and damage
- Let explosions go through blocks without destruction (configurable, defaults to: lava, water, bedrock, other).
- damage living entities according to the arriving strength of the explosion, not the distance to the center.
- Fires EntityExplodeEvent and EntityDamageEvent and allows canceling by other plugins.
- API might be used by other plugins to trigger explosions.
 
Issues:
! Sand glitches: Not sure this can be done with physics...
! TNT glitches: Might be related as to when exactly the entity is removed (currently before starting the explosion, thus the dead entity is passed with the Explosion event). 
! Re-think event priorities and canceling to allow other plugins canceling the ExplosionPrimeEvent as well [Probably ok with highest].
! Re-think which events to intercept: [Currently for performance reason TNTPrimed is canceled always, to prevent calculations for the explosion being done by CraftBukkit or MC]
? propagation differs slightly concerning x / z ? [Will change anyway, seems to be about right now.] 
! ALWAYS: keep adjusting  default values to something realistic...
  
Planned:
! add: limit explosions to certain y-coordinates (upper / lower limit).
! Must add: fire, if fire is set.
! add configuration flag for enabled (need not be changed by commands).
! MAKE SETTINGE DETACHED , default, world specific, ... further ...
? Damage or change  entities according to their type (TNT->Explode, ItemStacks - damage)
! More fine grained vector manipulation 
! Use velocity events if possible !
! add explosions on water : do allow config option to only damage entities.
! More events (+configurable if, also for the old ones !) like ItemSpawn or similar.
! direct explode feature (threshold + possibly with probabilities: 1. p(direct) -> if not... maybe prime) [Might better be a lower ignition value for primed tnt, rather than exploding it directly]
! Explosion API: add call with exploding entitytype as argument [exists already], but with flag to create that entity temporarily
? flag: alwaysIncludeTNT -> even if resistance of tnt is to high still add tnt.
! Option to prevent explosion events for certain configurations, if they slipped past the net of FatTnt.
! Check for creative mode on players (seems not to cancel damage events but have effect).
! creation of entities from blocks: generic defs for velocity etc.
! Transformations for entities (hit) ... also generic setups, from(conditions, minStr, entity specific)...ro(velocity, entity specific, removal)
? (add) EntityCombust for tnt : create primed tnt for item
  
Maybe:
? (add) Ways to damage blocks over time ?[Use damage values ? hat with block break?]
! (add) Ways to damage blocks more by many explosions within one or several ticks [remember blocks + timestamp ?].
- WorldGuard: add a quick switch to prevent explosions if touching WorldGuard regions
! Config option to allo tnt to be dropped as item with probability, also add probability for actually destroying tnt items as well.
? Allow to delay tnt explosion on ExplosionPrimeEvents (schedule new or st primed for later)
? Allow arbitrary strength (but limit radius) ?
? configure maximum radius to be handled and if to be aborted otherwisec or log/warn.
? propagate explosion slowly ?
? Schedule TNT option (limit to n per tick or some total size)
? use lock + exception later on for API access
? prime tnt from itm drops or when in fire?
? other explosion shaping
!(add) Chance for tnt getting disabled under certain circumstances (not go off in water, or not getting primed there).
!(add) Propagation API, set by name , with config/set on applyConfig, maybe search for classes. [only if it pays.] 
!(add) Item-stacks: allow reducing or damaging them ratehr than dumb yield.
!(add) splash potion items ?
!(add) keep track of entities that got velocity added, for a strongest-wins heuristic ? [reason: massive tnt = quadratic entityeffects, postentially, though number is limited by range ...]
! (add) Tackle/Option: Damage further than explosion reach ?  [demands heuristic calculation]
        -> Problem: breaks the shelter principle a little bit.
        -> Solution: Use (some*) rays towards center, if a block is not destroyed and has not let the explosion pass through, then checking stops there, if the center is exposed, damage
           (*) Maybe also has to do orthogonal checks where changing more than one coordinate ?
? (add) Exploding conditions for other mobs ? (mooshroom?) 

SCHEDULE (Might include ideas, points to check.)
-----------------------------------------------------------------
! add: control over block/entity effects based on conditions (y-coordinate, explosion in material).
? EVALUATE: altered block list for event: entity effects are different that way.
! Evaluate: use array of continuations
! Evaluate: emulate vanilla style explosions ?
! Evaluate: add something random, or the position bias (entity at some offset)
!EVALUATE: use ray.distance array to allow splitting maximum radius from resistance (and eventually giving the path multiplier a PURPOSE).
! EVALUATE: maximum block destruction  distance? [from entities : calculate the rays only, along the ray but usual method?]
? increase range but increase resistance of normal materials
? add config if to use damage amount for armor depletion as well + maybe a modifier.
? do add greedy options, entities as blacklist, maybe: ignore worlds | maybe: world specific settings (PriorityValue etc.).
! Check: use craftbukkit/minecraft internals to calculate damage ?
? Maybe add: Probability distribution also config readable ProbDist<SubType> -> entries with (ignored keys and) part definition (part/sum(all parts)) and the sub object merged into the section.
! Add good explanation of what i will do / when, what the plugins does/not.
    - (i will not try to find the BEST configuration that is CLOSEST to Vanilla, 
      but i will add one if someone claims to have found it and others confirm it).
    - Do point out where are differnces to vanilla and which will certainly be adjusted to be close to vanilla if wanted.
    - Performance implications (Memory, CPU) + example stats.
    - ...
! check way to reduce unnecessary multiple visits: 
    a) (.) park positions and continue later(minimum sphere) 
    b) (.) maybe use preset directions map
    c) (x) maximum path length for propagation [Less blocks visited by recursion - actually ineffective with default settings!]
    d) (.) maximum number of direction changes
    e) (.) all in one method, no recursion (at the cost of permanently used memory, though) 
    f) (.) if e) used: one might release the memory if not used, so the next explosion will take more time. [RATHER NOT]
    g) (.) decrease direction changes with each step anyway but keep at some minimum if going into the same direction !
    h) (.) Use direction change and path length independently (decrease on base of what happens, change or stay).
    j) (.) Add moving heuristic, that gives possible continuations according to already chosen path !
    z) (...) Boil all down to some algorithm that does it in another way, just faster :)
! Make some settings dependent on entities (damage multiplier at least)
! (add) spare entities instead of a spare tnt flag. [maybe as part of specific configurations]
! (add) EntityDamageByEntity event ?
! (add) blocks that let the explosion through but can be destroyed (alter to ignore, destructible)
! (add) various options to manipulate tnt that gets primed: randomized duration, fast explode (fixed start), decrease of duration (fixed) 
! (add) Configure world specific settings (and defaults), at least: disable certain worlds. 
! Fire custom events (with content) allowing for adjusting manipulations in a more fine grained way (!) [Basic design done: just adds an object, later convenience method, that check if given FatExplosionSpecs do have the property and return accordingly instead of an exception]
! add PriorityValue etc. from swgt for configuration.
! smarter reload: Propagation.applySettings (maybe factory method for replacing, invoking necessary checks)
! add option: placing tnt to replace lava or fire could result in primed tnt too ...
! (add) Two greedy config flags: handle-all-explosions (greedy-1) and prevent-other-explosions (greedy-2) [1 applies to explosion prime, 2 prevents Explosion events that bypassed explosion prime.]
! Add: file defs for the main config, use multiple files for configuration?
! mind: For use with greedy: might have to add null-flags for handle-or-handle-not entities. Events might be thrown by any plugin ...

GRAVEYARD
-----------------------------------------------------------------


STACK
--------------------------------------


*** 0.2.0

*** OPT


*** API
- (add) "Add some API methods for new stuff, if necessary."
- (add) Use most specific Bukkit events where possible (with entities added etc.)
- (add) FatExplosionSpec: content ! make some things adjustable !
- ?make fatexplosionspecs an interface ?

*** FEATURES:
- !(add) flags to control some more stuff (forgot)...
- !(add) Possibility to control ordinary explosions (not replace) ?

*** SPECIFIC/CONFINEMENT SETTINGS
? name for confinement
?CHECK confinement = inside + outside settings + settings just as normal ? 
- ?(add) Confinement/outside: allow-explosion, allow-block-damage, allow-entity-damage, 
!(add) confinement: minY, maxY [maybe tweak the resistance for those to not add the blocks in the first place?]

*** FILTER SETTINGS
- ! block settings: allow null as well, so only set them once if not specified otherwise.
- ! block settings: maybe allow named sets of block ids (defined ONCE) + allow remove ids + add ids !
- (add) What to handle, greedy-flags, 

*** CLEANUP OF SETTINGS
- defaults, world-specific, entity-specific, 
- ?(add) PriorityValue with filter technique for effective settings (defaults, worlds, entities: exploding+affected, ...)?

? add WorldGuard hook (check some flags)
! maybe refill random array every so and so explosions.
! DO TRY: Preset directions, maybe include some diagonals + malus for directions ? 
!CHECK: randomized version: prevent collection of that many blocks !
!REFACTOR: Introduce ExplosionSettings or SettingsMixins to be read from paths: world-setings, entity-settings, etc. - use PriorityValues !
!CHECK final settings in FatTnt (maye get rid of final)
!REFACTOR: Propagation/ArrayPropagation: Less fixed variables, use settings.


*** Greedy / handle-explosions settings !
WorldSettings: handle-explosions: entities+entities-as-blacklist, handle-all-explosions, prevent-other-explosions, replace-other-explosions
? also cancel other explosions -> config flag !

*** UNSORTED
- Entities: get them from chunks, check what the code does (CraftBukkit side as well). Log number of checked entities !
- Do: statistics file for the test setup for comparison


CHANGELOG (May show an unreleased version but only done changes.)
-----------------------------------------------------------------

*** [Beta/Dev stage]

(0.2.0-DEV-3)
- (update) config/compatlayer

(0.2.0-DEV-2)
- (add) World dependent settings: confine
- (add) configuration: compatlayer
- (update) PrioritySettings

(0.2.0-DEV-1)
- (add) Confinement settings (y). [by now: only global setting, applies for all worlds!] 
- (add) Re-add randomization option to propagation. [Lets 50-70% more blocks be visited, which costs some performance!]
- (adjust) Increase default radius multiplier by 1/8.
- (refactor) Code simplification for the configuration.
- (refactor) Separate Path class for configuration paths.
- (add) prioritiyvalues from plshared/swgt


(0.1.8-DEV-5)
- (note) The configuration is a mess :) - it WILL get changed some time later.
- (add) Additional distance based damage.
- (add) Modifiers for armor damage.
- (add) Stats for explode event (protection plugins use up time!). 

(0.1.8-DEV-4)
- (refactor) Remove recursion from propagation, to see what happens.

(0.1.8-DEV-3)
- (adjust) damage modifier is too low :) - problem is the method does only damage within block-reach currently.
- (add) Basic armor depletion for blasts + damage reduction also by enchantments.
- (bugfix) Passthrough resistance: same thing, compare to explosion strength, not material resistance.
- (bugfix) Quick propagation abort: has to compare to expStr not resistance of material.
- (add) DamageProcessor in use (does nothing new yet, but API allows setting it).

- (add) passthrough resistance feature.
- (remove) ignore feature
- (refactor) Move default values from Defaults to Settings as class members (does not need double updating). 
- (bugfix) Randomized fuse ticks: min-prime and max-prime are now correctly used: either <= 0 will be default Minecraft fuse ticks, otherwise from ... to.

(0.1.7) ["almost vanilla"]
- (add) step-physics option, which currently removes blocks without applying physics on explosions [inoperable, just does not apply any physics]
- (add) randomized tnt ignition (min-prime, max-prime) [currently only if hit by explosion]
- (add) max-items setting to spawn multiple but not arbitrarily many if an item stack has more...
- (add) Projectiles hit by explosion get affected.
- (add) Arrow effect possible (for items) 
- (add) Option to destroy items, boats, falling sand: item-yield [To be more fine grained later on, probably]
- (add) Option to let burned tnt items explode (fire and lava, possibly other: item-tnt, later maybe burning tnt). 
- (add) Option to let TNT-Items be changed to primed tnt if hit by the explosion (item-tnt).
- (add) Velocity cap (not applied if <= 0).

(0.1.6)
- (add) Made path multiplier configurable.
- (adjust) Cleanups and small improvements for propagation methods.
- (bugfix) Configuration reloading behavior.
- (add) Color to stats output.
- (adjust) When velocity and damage are applied to entities (few visible effects).
- (add) API: Shaped how to set up events (has few effects, yet)
- (add) Stats entries, such as damage, ...
- (adjust) Damage multiplier to 3.0 (forgot the initial radius is greater than 1)

(0.1.5)
- (add) Stats (from RSP), with command "stats" and "stats reset", for various parts of the calculations (time and other)
- (refactor) propagation method: use minResistance and use preset increments to reduce structural code repetition [not necessarily faster but safer.]
- (add) Use the minimum resistance value, calculated from settings to abort propagation faster.
- (bugfix) Default values are now chosen as intended.
- (add) API, for later: ExplosionManager.createExplosionEffect 
- (refactor) ExplosionManager: split applyExplosionEffects for blocks and entities.
- (add)  API: allow damage multiplier as argument.
- (adjust) default damage and radius multipliers.
- (refactor) Put default values to Defaults, reference from Settings.
- (refactor) Use custom event classes extending the standard events.
- (bugfix) API method was empty.

(0.1.4)
- (bugfix) Remove debug output, add final debug flag to FatTnt.

(0.1.3)
- (Add) API: getInstance, static: getInstance for the Plugin.

(0.1.2)
- (add) API for explosion strength.
- (refactor) Split some more code off plugin.

(0.1.1)
- (bugfix) Number conversion issue leading to an offset for the explosion.

(0.1.0)
- (refactor) Major refactoring, to split settings and propagation model off the plugin class.

(0.0.4) 
- Some fixes, including damage, damage strength, collected blocks, prime tnt blocks. 