FatTnt lists
---------------------------------------

LICENSE [LICENSE PENDING]
--------------------------
Something minimal on top of what can be done with a Bukkit/CraftBukkit plugin.
Supposedly this would range from public domain (probably not) to somewhere around MIT license.
Actually it is safe to assume MIT license, but if the license can be "less", i will probably make it so.



Features: 
 - select what entities are handled (tnt, creeper?)
 - configure: block resistance (strength)
 - modifiers for explosion radius and damage
 - Let explosions go through blocks without destruction (configurable, defaults to: lava, water, bedrock, other).
 - damage living entities according to the arriving strength of the explosion, not the distance to the center.
 - Fires EntityExplodeEvent and EntityDamageEvent and allows canceling by other plugins.
 - API might be used by other events to trigger explosions.
 
Issues:
! propagation differs slightly concerning x / z !.
 ! Sand/TNT spazzing: First set blocks without physics, then later apply physics [physics might be scheduled to the next tick ...]?
 ! adjust default values to something realistic...
 ! Re-think event priorities and canceling to allow other plugins canceling the ExplosionPrimeEvent as well [Probably ok with highest].
 ! Re-think which events to intercept: [Currently for performance reason TNTPrimed is canceled always, to prevent calculations for the explosion being done by CraftBukkit or MC] 
 
Planned:
 ! flag: only apply velocity if damage event is not canceled !
 ! Must add: fire, if fire is set.
 ! Random tick delay for primed tnt.
 ! add configuration flag for enabled (need not be changed by commands).
 ! MAKE SETTINGE DETACHED , default, world specific, ... further ...
 ? Damage or change  entities according to their type (TNT->Explode, ItemStacks - damage)
 ! More fine grained vector manipulation 
 ! Use velocity events if possible !
 ! add explosions on water : do allow config option to only damage entities.
 ! More events (+configurable if, also for the old ones !) like ItemSpawn or similar.
 ! direct explode feature (threshold + possibly with probabilities: 1. p(direct) -> if not... maybe prime)
 ! Explosion API: add call with exploding entitytype as argument [exists already], but with flag to create that entity temporarily
  ? flag: alwaysIncludeTNT -> even if resistance of tnt is to high still add tnt.
  
Maybe:
? Allow to delay tnt explosion on ExplosionPrimeEvents
 ? Allow arbitrary strength (but limit radius) ?
 ? More custom settings to allow for adding fire or whatever to certain or all explosions.
 ! Fire custom event allowing for adjusting manipulations in a more fine grained way (!)
 ? configure maximum radius to be handled and if to be aborted otherwise.
 ? propagate explosion slowly ?
 ? Schedule TNT option (limit to n per tick)
 ? use lock + exception later on for API access
 ? prime tnt from itm drops or when in fire?
 ? other explosion shaping

SCHEDULE (Might include ideas, points to check.)
-----------------------------------------------------------------
! Damage multiplier: Does lead to way to high damage, though md*mr == 24 
! Velocity cap + maybe flags what to apply it to / when
! check way to reduce unnecessary multiple visits: 
    a) (.) park positions and continue later(minimum sphere) 
    b) (.) maybe use preset directions map
    c) (x) maximum path length for propagation [Less blocks visited by recursion]
    d) (.) maximum number of direction changes
    e) (.) all in one method, no recursion (at the cost of permanently used memory, though) 
    f) (.) if e) used: one might release the memory if not used, so the next explosion will take more time. [RATHER NOT]
    g) (.) decrease direction changes with each step anyway but keep at some minimum if going into the same direction !
    h) (.) Use direction change and path length independently (decrease on base of what happens, change or stay).
    i) (...) Boil all down to some algorithm that does it in another way, just faster :)
! Make some settings dependent on entities (damage multiplier at least)
! (add) The arrow effect possible ! (possibly splash potions too ?)
! (add) spare entities instead of a spare tnt flag. [maybe as part of specific configurations]
! (add) EntityDamageByEntity event ?
! (add) blocks that let the explosion through but can be destroyed (alter to ignore, destructible)
! (add) various options to manipulate tnt that gets primed: randomized duration, fast explode (fixed start), decrease of duration (fixed) 
- (add) Configure world specific settings (and defaults), at least: disable certain worlds. 

CHANGELOG (May show an unreleased version but only done changes.)
-----------------------------------------------------------------


*** [Beta/Dev stage]

(0.1.6-DEV)
- (add) Color to stats output.
- (adjust) When velocity and damage are applied to entities (few visible effects).
- (add) API: Shaped how to set up events (has few effects, yet)
- (add) Stats entries, such as damage, ...
- (adjust) Damage multiplier to 3.0 (forgot the initial radius is greater than 1)

(0.1.5)
- (add) Stats (from RSP), with command "stats" and "stats reset", for various parts of the calculations (time and other)
- (refactor) propagation method: use minResistance and use preset increments to reduce structural code repetition [not necessarily faster but safer.]
- (add) Use the minimum resistance value, calculated from settings to abort propagation faster.
- (bugfix) Default values are now chosen as intended.
- (add) API, for later: ExplosionManager.createExplosionEffect 
- (refactor) ExplosionManager: split applyExplosionEffects for blocks and entities.
- (add)  API: allow damage multiplier as argument.
- (adjust) default damage and radius multipliers.
- (refactor) Put default values to Defaults, reference from Settings.
- (refactor) Use custom event classes extending the standard events.
- (bugfix) API method was empty.

(0.1.4)
- (bugfix) Remove debug output, add final debug flag to FatTnt.

(0.1.3)
- (Add) API: getInstance, static: getInstance for the Plugin.

(0.1.2)
- (add) API for explosion strength.
- (refactor) Split some more code off plugin.

(0.1.1)
- (bugfix) Number conversion issue leading to an offset for the explosion.

(0.1.0)
- (refactor) Major refactoring, to split settings and propagation model off the plugin class.

(0.0.4) 
- Some fixes, including damage, damage strength, collected blocks, prime tnt blocks. 