FatTnt lists
---------------------------------------

LICENSE [LICENSE PENDING]
--------------------------
Something minimal on top of what can be done with a Bukkit/CraftBukkit plugin.
Supposedly this would range from public domain (probably not) to somewhere around MIT license.
Actually it is safe to assume MIT license, but if the license can be "less", i will probably make it so.


FEATURES
----------------

Features: 
- Control what can explode in which world, or is handled by FatTnt at all.
- Confine explosions to a range of y-coordinates for each world.
- Configurable block explosion resistance.
- Let explosions go through blocks without destruction (configurable, defaults to: lava, water, bedrock, other).
- Damage living entities according to the arriving strength of the explosion, not just the distance to the center, configurable blocks that pass on damage.
- Some armor handling, allow heavier armor damage.
- Affect projectiles, let tnt get primed with velocity right away, create real tnt or arrows from items or ignited tnt.
- Modifiers for explosion radius and damage
- Many other aspects are configurable.
- Schedules explosions and entity spawning, allowing to reduce the number based on thresholds for total number and per chunk plus timeout, "relatively fair" scheduling.
- Relatively fine grained settings possible with defaults, entity specific, world specific, world+entity.
- Fires EntityExplodeEvent and EntityDamageEvent and allows canceling by other plugins.
- API might be used by other plugins to trigger explosions.
 
REAL ISSUES
----------------

! Re-think event priorities and canceling to allow other plugins canceling the ExplosionPrimeEvent as well [Probably ok with highest].
! ALWAYS: keep adjusting  default values to something realistic...
  
  
CLEANUP THESE
------------------

Planned:
? Damage or change  entities according to their type (TNT->Explode, ItemStacks - damage)
! More fine grained vector manipulation 
? Use velocity events if possible !
! add explosions on water : do allow config option to only damage entities.
! More events (+configurable if, also for the old ones !) like ItemSpawn or similar.
! direct explode feature (threshold + possibly with probabilities: 1. p(direct) -> if not... maybe prime) [Might better be a lower ignition value for primed tnt, rather than exploding it directly]
! Explosion API: add call with exploding entitytype as argument [exists already], but with flag to create that entity temporarily
? flag: alwaysIncludeTNT -> even if resistance of tnt is to high still add tnt.
! Check for creative mode on players (seems not to cancel damage events but have effect).
! creation of entities from blocks: generic defs for velocity etc.
! Transformations for entities (hit) ... also generic setups, from(conditions, minStr, entity specific)...ro(velocity, entity specific, removal)
  
Maybe:
optimize: consider direct hacks to get entities: use the chunk wise storage of entities for faster getting (only affects servers with MANY entities)?
optimize: smart randomization: Option to or change to only use randomization of propagated explosion strength for destroyed blocks ? (performance trick)
? evaluate: use chunks, store chunks ? use getChunkSnapShot for faster processing ? -> Check if Async processing would be possible.
?optimize do not use getBlock but collect positions, calculate involved chunks and create craftblocks directly ! 
? (add) Ways to damage blocks over time ?[Use damage values ? hat with block break?]
! (add) Ways to damage blocks more by many explosions within one or several ticks [remember blocks + timestamp ?].
- WorldGuard: add a quick switch to prevent explosions if touching WorldGuard regions
! Config option to allo tnt to be dropped as item with probability, also add probability for actually destroying tnt items as well.
? Allow to delay tnt explosion on ExplosionPrimeEvents (schedule new or st primed for later)
? Allow arbitrary strength (but limit radius) ?
? configure maximum radius to be handled and if to be aborted otherwisec or log/warn.
? propagate explosion slowly ?
? Schedule TNT option (limit to n per tick or some total size)
? use lock + exception later on for API access
? prime tnt from itm drops or when in fire?
? other explosion shaping
!(add) Chance for tnt getting disabled under certain circumstances (not go off in water, or not getting primed there).
!(add) Propagation API, set by name , with config/set on applyConfig, maybe search for classes. [only if it pays.] 
!(add) Item-stacks: allow reducing or damaging them ratehr than dumb yield.
!(add) splash potion items ?
!(add) keep track of entities that got velocity added, for a strongest-wins heuristic ? [reason: massive tnt = quadratic entityeffects, postentially, though number is limited by range ...]
! (add) Tackle/Option: Damage further than explosion reach ?  [demands heuristic calculation]
        -> Problem: breaks the shelter principle a little bit.
        -> Solution: Use (some*) rays towards center, if a block is not destroyed and has not let the explosion pass through, then checking stops there, if the center is exposed, damage
           (*) Maybe also has to do orthogonal checks where changing more than one coordinate ?
? (add) Exploding conditions for other mobs ? (mooshroom?) 

SCHEDULE (Might include ideas, points to check.)
-----------------------------------------------------------------
! add: control over block/entity effects based on conditions (y-coordinate, explosion in material).
? EVALUATE: altered block list for event: entity effects are different that way.
! Evaluate: use array of continuations
! Evaluate: emulate vanilla propagation model for explosions ?
! Evaluate: add something random, or the position bias (entity at some offset)
!EVALUATE: use ray.distance array to allow splitting maximum radius from resistance (and eventually giving the path multiplier a PURPOSE).
! EVALUATE: maximum block destruction  distance? [from entities : calculate the rays only, along the ray but usual method?]
? increase range but increase resistance of normal materials
? add config if to use damage amount for armor depletion as well + maybe a modifier.
? do add greedy options, entities as blacklist, maybe: ignore worlds | maybe: world specific settings (PriorityValue etc.).
! Check: use craftbukkit/minecraft internals to calculate damage ?
? Maybe add: Probability distribution also config readable ProbDist<SubType> -> entries with (ignored keys and) part definition (part/sum(all parts)) and the sub object merged into the section.
! Add good explanation of what i will do / when, what the plugins does/not.
    - (i will not try to find the BEST configuration that is CLOSEST to Vanilla, 
      but i will add one if someone claims to have found it and others confirm it).
    - Do point out where are differnces to vanilla and which will certainly be adjusted to be close to vanilla if wanted.
    - Performance implications (Memory, CPU) + example stats.
    - ...
! check way to reduce unnecessary multiple visits: 
    a) (.) park positions and continue later(minimum sphere) 
    b) (.) maybe use preset directions map
    c) (x) maximum path length for propagation [Less blocks visited by recursion - actually ineffective with default settings!]
    d) (.) maximum number of direction changes
    e) (x) all in one method, no recursion (at the cost of permanently used memory, though) 
    f) (.) if e) used: one might release the memory if not used, so the next explosion will take more time. [RATHER NOT]
    g) (.) decrease direction changes with each step anyway but keep at some minimum if going into the same direction !
    h) (.) Use direction change and path length independently (decrease on base of what happens, change or stay).
    j) (.) Add moving heuristic, that gives possible continuations according to already chosen path !
    z) (...) Boil all down to some algorithm that does it in another way, just faster :)
! (add) spare entities + spare items instead of a spare tnt flag. [maybe as part of specific configurations]
! (add) EntityDamageByEntity event ?
! (add) blocks that let the explosion through but can be destroyed (alter to ignore, destructible)
! (add) various options to manipulate tnt that gets primed: randomized duration, fast explode (fixed start), decrease of duration (fixed) 
! (add) Configure world specific settings (and defaults), at least: disable certain worlds. 
! Fire custom events (with content) allowing for adjusting manipulations in a more fine grained way (!) [Basic design done: just adds an object, later convenience method, that check if given FatExplosionSpecs do have the property and return accordingly instead of an exception]
! add PriorityValue etc. from swgt for configuration.
! smarter reload: Propagation.applySettings (maybe factory method for replacing, invoking necessary checks)
! add option: placing tnt to replace lava or fire could result in primed tnt too ...
! (add) Two greedy config flags: handle-all-explosions (greedy-1) and prevent-other-explosions (greedy-2) [1 applies to explosion prime, 2 prevents Explosion events that bypassed explosion prime.]
! Add: file defs for the main config, use multiple files for configuration?
! mind: For use with greedy: might have to add null-flags for handle-or-handle-not entities. Events might be thrown by any plugin ...


STACK
--------------------------------------


*** 0.2.0

*** OPT


*** API
- (add) "Add some API methods for new stuff, if necessary."
- (add) Use most specific Bukkit events where possible (with entities added etc.)
- (add) FatExplosionSpec: content ! make some things adjustable !
- ?make fatexplosionspecs an interface ?

*** FEATURES:
- !(add) flags to control some more stuff (forgot)...
- !(add) Possibility to control ordinary explosions (not replace) ?


*** FILTER SETTINGS
- ! block settings: allow null as well, so only set them once if not specified otherwise.
- ! block settings: maybe allow named sets of block ids (defined ONCE) + allow remove ids + add ids !
- (add) What to handle, greedy-flags, 


*** UNSORTED
? add WorldGuard hook (fast explosion denial heuristics).
! maybe refill random array every so and so explosions.
! DO TRY: Preset directions, maybe include some diagonals + malus for directions ? 
!CHECK: randomized version: prevent collection of that many blocks !
!CHECK final settings in FatTnt (maye get rid of final)
!REFACTOR: Propagation/ArrayPropagation: Less fixed variables, use settings.
- Do: statistics file for the test setup for comparison

*** ITERATION -------------------------------------------------------------------------------------

*** LOL ITERATION

*** SPECIFIC/CONFINEMENT SETTINGS
? name for confinement
?CHECK confinement = inside + outside settings + settings just as normal ? 
- ?(add) Confinement/outside: allow-explosion, allow-block-damage, allow-entity-damage, <- ? damage settings for outside?
!(add) confinement: minY, maxY [maybe tweak the resistance for those to not add the blocks in the first place?]

*** CLEANUP OF SETTINGS
- ?Check:  allow block names !
- defaults, world-specific, entity-specific, 
- ?(add) PriorityValue with filter technique for effective settings (defaults, worlds, entities: exploding+affected, ...)?

*** UNCATEGORIZED


? maybe consider FatExplosionCancelEvent (reason: SCHED_MAX_CHUNK SCHED_MAX_TOTAL CONFIG and similar.)
? check: Schedule the explosion handling for a tick later (effect on stats, better consistency)? + allows for number of explosions / tick control. => ExplosionScheduler

! check : where to remove the explEntity and other stuff that is not needed for ExplosionSettings passing.

consider: keep track of spawned entities (including tnt) + make caps + keep track of worlds, in terms of intensity of tnt.
consider: cleanup command: remove tnt + scheduled explosions
consider: world item cap (risky: could remove any sort of items, probably restrict to dirt, stone, sand, gravel, netherrack)
consider: fast item despawn (another scheduler ??) or set ticks lived or similar (!) to let them despawn
***

*** get entities from chunks maybe.
Try the ordering of propagation: first the inner cube !

thinking further: schedule block changes... intricate system how schedulers relate and might release resources for the important stuff. 

!add item maximums etc to combusted items !
maybe also schedule similar way: entities to spawn, LIMIT to maximum, spawn delayed same scheduler principle. [refactor: abstract chunk base scheduler, probably: bigger chunks ?]

Refactor ? Schedulers into Explosion manager + the task checker!

? cut down to average rightaway, depending on amount that must be reduced (one more flag) [but first remove expired !]?

*** Try to find out how arises the strong lag (items? primed tnt? )

// TODO: add %n for schedulers to let them run not every tick (delayed spawning for drops at least) OR LOAD dependent

consider: after removing expired:_ reschedule the chunk ? => rather not

? maybe refactor to have the processing loop inside of scheduler ?

add booleans to config if to schedule.

TODO: use schedulers everywhere. applyENtityeffects adn applyBlockEffects: item spawning

? somehow log the removed N ? 
get fuseTick settings in place everywhere.
?(add) Fast item despawn: set random despawn time.
***
 ? the defaults concept is maybe not optimal (defaults should contain entity specific settings?).
 !add: profiling option ! -> create a test cube + create an explosion there (either normal or fattnt) 
? (add) Capability to run the getBlocks completely asynchronus (schedule many, apply blocks successively). 

 
 ! (add) remove [<radius>] command 
 
 ?(add) Settings: shooting-entitiy for projectiles (ghast fireballs vs player fireballs) !

  ? simple flag for treating resistance as passthrough + prevent all block damage
  
 ?(add) general modifiers ?
 !(add) Material modifier (explode in water = ... explode in lava = ...
  
*** SCHEDULER UPDATE
*** General schedulers ?
?(add) Scheduler for block changes or general purpose ?
?consider: a general random scheduler: schedules with random x,z but does reduction.
?(change) Change to several schedulers and assign according to config (!).
!(refactor) One more interface to do the action for the object (like Runnable)

*** World specific schedulers ?
Bugfix schedulerset for each world (optional do use only one  )!
refactor : CWSchedSettings ! (store settings, use for all schedulers of the same kind).
  
*** ? RELEASE STEP

*** ANYTHING ELSE ?
!(add) propagation.setTypeId(...)  + use getTypeId for entity damage as well!
? Extra settings for explosions in materials ?
!(add) Named sets of ids  + ability to reference those from passthrough and resistance.
!(add) Possibility to reduce fuse ticks if tnt is hit by other explosions.

*** Default settings: a first detailed version!

*** Settings: consider other changes to configuration paths ! [maybe an extra update for that]
? velocity settings
*** Settings: test + ?cleanup

? what was this : all settings / PV : defaults have different priorities, must use from ref ! [maybe already done]
!Test all sorts of overrides (including confine, worlds, entities, priorities)

*** FIRE

?(add) FIRE 
!(add) Explosionsettings: fire: always => probability: overrides the fire value from ExplosionPrime events ? (or all..)
!(add) Fire: p-removed + n-random = chance to set a removed block on fire + number of tries to add fire randomly within explosion radius or near center + events !


*** ?

? item-arrows: arrows cant be picked up ?

!(add) Control over ignition time in general ! [?needs blockredstone event ?]
!(add) override fuse ticks for primed tnt (exclude that from fattnt) -> ?TntIgnition settings [min-prime, max-prime, item-tnt ?]


? Evaluate: define blocks, such that if an explosion goes of in such a block, it will not damager other blocks ?

*** Quick release in between 


*** config path renaming [rather use sub sections that group stuff, for instance propagation.array]
- propagation.array section
- tnt section ...
- ignition settings or individual paths
- ? projectiles section
- items section


*** CLEANUP CONFIG + LISTS FILE

*** Fast convenience update: named sets of blocks + reference those !
!(add) Sane default settings for the schedulers !
!(bugfix) Include scheduler settings in the default configuration. 
!(add) commands section to bukkitdev 


VERSION HISTORY (only done changes)
-----------------------------------------------------------------

*** [Beta/Dev stage]


(1.0.0)
- (CHANGE) Packet naming.

(0.2.0-DEV-3)
- (add) Direct explode threshold (scheduled for next tick).
- (change) By default all explosion types are handled by FatTnt (if they use events).
- (add) Commands for enable disable panic unpanic.
- (add) Explosion scheduling, Entity scheduling, Item scheduling.
- (refactor) Configuration structure: Explosion can be set directly and per exploding entity, this goes for top level (default) and world-settings, individually.
- (optimize) Store ids of visited blocks.
- (adjust) Adjust getNearbyEntities to spawn an arrow as fake entity instead of a chicken.
- (update) config/compatlayer

(0.2.0-DEV-2)
- (add) World dependent settings: confine
- (add) configuration: compatlayer
- (update) PrioritySettings

(0.2.0-DEV-1)
- (add) Confinement settings (y). [by now: only global setting, applies for all worlds!] 
- (add) Re-add randomization option to propagation. [Lets 50-70% more blocks be visited, which costs some performance!]
- (adjust) Increase default radius multiplier by 1/8.
- (refactor) Code simplification for the configuration.
- (refactor) Separate Path class for configuration paths.
- (add) prioritiyvalues from plshared/swgt


(0.1.8-DEV-5)
- (note) The configuration is a mess :) - it WILL get changed some time later.
- (add) Additional distance based damage.
- (add) Modifiers for armor damage.
- (add) Stats for explode event (protection plugins use up time!). 

(0.1.8-DEV-4)
- (refactor) Remove recursion from propagation, to see what happens.

(0.1.8-DEV-3)
- (adjust) damage modifier is too low :) - problem is the method does only damage within block-reach currently.
- (add) Basic armor depletion for blasts + damage reduction also by enchantments.
- (bugfix) Passthrough resistance: same thing, compare to explosion strength, not material resistance.
- (bugfix) Quick propagation abort: has to compare to expStr not resistance of material.
- (add) DamageProcessor in use (does nothing new yet, but API allows setting it).

- (add) passthrough resistance feature.
- (remove) ignore feature
- (refactor) Move default values from Defaults to Settings as class members (does not need double updating). 
- (bugfix) Randomized fuse ticks: min-prime and max-prime are now correctly used: either <= 0 will be default Minecraft fuse ticks, otherwise from ... to.

(0.1.7) ["almost vanilla"]
- (add) step-physics option, which currently removes blocks without applying physics on explosions [inoperable, just does not apply any physics]
- (add) randomized tnt ignition (min-prime, max-prime) [currently only if hit by explosion]
- (add) max-items setting to spawn multiple but not arbitrarily many if an item stack has more...
- (add) Projectiles hit by explosion get affected.
- (add) Arrow effect possible (for items) 
- (add) Option to destroy items, boats, falling sand: item-yield [To be more fine grained later on, probably]
- (add) Option to let burned tnt items explode (fire and lava, possibly other: item-tnt, later maybe burning tnt). 
- (add) Option to let TNT-Items be changed to primed tnt if hit by the explosion (item-tnt).
- (add) Velocity cap (not applied if <= 0).

(0.1.6)
- (add) Made path multiplier configurable.
- (adjust) Cleanups and small improvements for propagation methods.
- (bugfix) Configuration reloading behavior.
- (add) Color to stats output.
- (adjust) When velocity and damage are applied to entities (few visible effects).
- (add) API: Shaped how to set up events (has few effects, yet)
- (add) Stats entries, such as damage, ...
- (adjust) Damage multiplier to 3.0 (forgot the initial radius is greater than 1)

(0.1.5)
- (add) Stats (from RSP), with command "stats" and "stats reset", for various parts of the calculations (time and other)
- (refactor) propagation method: use minResistance and use preset increments to reduce structural code repetition [not necessarily faster but safer.]
- (add) Use the minimum resistance value, calculated from settings to abort propagation faster.
- (bugfix) Default values are now chosen as intended.
- (add) API, for later: ExplosionManager.createExplosionEffect 
- (refactor) ExplosionManager: split applyExplosionEffects for blocks and entities.
- (add)  API: allow damage multiplier as argument.
- (adjust) default damage and radius multipliers.
- (refactor) Put default values to Defaults, reference from Settings.
- (refactor) Use custom event classes extending the standard events.
- (bugfix) API method was empty.

(0.1.4)
- (bugfix) Remove debug output, add final debug flag to FatTnt.

(0.1.3)
- (Add) API: getInstance, static: getInstance for the Plugin.

(0.1.2)
- (add) API for explosion strength.
- (refactor) Split some more code off plugin.

(0.1.1)
- (bugfix) Number conversion issue leading to an offset for the explosion.

(0.1.0)
- (refactor) Major refactoring, to split settings and propagation model off the plugin class.

(0.0.4) 
- Some fixes, including damage, damage strength, collected blocks, prime tnt blocks. 